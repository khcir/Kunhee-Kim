{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c89c0234",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pathlib\n",
    "import re\n",
    "import json\n",
    "from datetime import datetime\n",
    "import flask\n",
    "\n",
    "import dash\n",
    "from jupyter_dash import JupyterDash\n",
    "from dash import dash_table\n",
    "import matplotlib.colors as mcolors\n",
    "import dash_bootstrap_components as dbc\n",
    "from dash import dcc\n",
    "from dash import html\n",
    "import plotly.graph_objs as go\n",
    "import plotly.express as px\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from dash.dependencies import Output, Input, State\n",
    "from dateutil import relativedelta\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "from sklearn.manifold import TSNE\n",
    "from textblob import TextBlob "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aab63d7d",
   "metadata": {},
   "source": [
    "## Data preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "00907ee0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating</th>\n",
       "      <th>title</th>\n",
       "      <th>date</th>\n",
       "      <th>review</th>\n",
       "      <th>product</th>\n",
       "      <th>avg_rating</th>\n",
       "      <th>processed_review</th>\n",
       "      <th>polarity</th>\n",
       "      <th>review_len</th>\n",
       "      <th>word_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>1</td>\n",
       "      <td>Disappointing vest</td>\n",
       "      <td>10 months ago</td>\n",
       "      <td>Should have listened to the reviews of this v...</td>\n",
       "      <td>Down for It All Vest</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Should have listened to the reviews of this v...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>136</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373</th>\n",
       "      <td>2</td>\n",
       "      <td>Swiftly tech</td>\n",
       "      <td>8 months ago</td>\n",
       "      <td>Within 30 minutes of wearing it started pulli...</td>\n",
       "      <td>Swiftly Tech Long Sleeve Shirt 2.0 Race Length</td>\n",
       "      <td>4.1</td>\n",
       "      <td>Within 30 minutes of wearing it started pulli...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>52</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>611</th>\n",
       "      <td>2</td>\n",
       "      <td>Swiftly tech</td>\n",
       "      <td>8 months ago</td>\n",
       "      <td>Within 30 minutes of wearing it started pulli...</td>\n",
       "      <td>Swiftly Tech Long Sleeve Shirt 2.0 Race Length</td>\n",
       "      <td>4.1</td>\n",
       "      <td>Within 30 minutes of wearing it started pulli...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>52</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>902</th>\n",
       "      <td>5</td>\n",
       "      <td>Great shirt!</td>\n",
       "      <td>3 months ago</td>\n",
       "      <td>I bought it for my teenage granddaughter!! Sh...</td>\n",
       "      <td>Swiftly Tech Long Sleeve Shirt 2.0Silverescent...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>I bought it for my teenage granddaughter!! Sh...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>104</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>922</th>\n",
       "      <td>5</td>\n",
       "      <td>Buy them all - Every color, every style, ...</td>\n",
       "      <td>4 months ago</td>\n",
       "      <td>Buy them all - Every color, every style, you ...</td>\n",
       "      <td>Swiftly Tech Long Sleeve Shirt 2.0Silverescent...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Buy them all - Every color, every style, you ...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     rating                                              title  \\\n",
       "157       1                             Disappointing vest       \n",
       "373       2                                   Swiftly tech       \n",
       "611       2                                   Swiftly tech       \n",
       "902       5                                   Great shirt!       \n",
       "922       5       Buy them all - Every color, every style, ...   \n",
       "\n",
       "                date                                             review  \\\n",
       "157  10 months ago     Should have listened to the reviews of this v...   \n",
       "373   8 months ago     Within 30 minutes of wearing it started pulli...   \n",
       "611   8 months ago     Within 30 minutes of wearing it started pulli...   \n",
       "902   3 months ago     I bought it for my teenage granddaughter!! Sh...   \n",
       "922   4 months ago     Buy them all - Every color, every style, you ...   \n",
       "\n",
       "                                               product  avg_rating  \\\n",
       "157                               Down for It All Vest         4.0   \n",
       "373     Swiftly Tech Long Sleeve Shirt 2.0 Race Length         4.1   \n",
       "611     Swiftly Tech Long Sleeve Shirt 2.0 Race Length         4.1   \n",
       "902  Swiftly Tech Long Sleeve Shirt 2.0Silverescent...         4.0   \n",
       "922  Swiftly Tech Long Sleeve Shirt 2.0Silverescent...         4.0   \n",
       "\n",
       "                                      processed_review  polarity  review_len  \\\n",
       "157   Should have listened to the reviews of this v...       0.0         136   \n",
       "373   Within 30 minutes of wearing it started pulli...       0.0          52   \n",
       "611   Within 30 minutes of wearing it started pulli...       0.0          52   \n",
       "902   I bought it for my teenage granddaughter!! Sh...       0.0         104   \n",
       "922   Buy them all - Every color, every style, you ...       0.0          57   \n",
       "\n",
       "     word_count  \n",
       "157          23  \n",
       "373           8  \n",
       "611           8  \n",
       "902          21  \n",
       "922          11  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"lululemon_website_reviews_v4.csv\")\n",
    "\n",
    "df.drop('Unnamed: 0', axis=1, inplace=True)\n",
    "df.drop_duplicates()\n",
    "\n",
    "def preprocess(ReviewText):\n",
    "    ReviewText = ReviewText.str.replace(\"(<br/>)\", \"\", regex=True)\n",
    "    ReviewText = ReviewText.str.replace('(<a).*(>).*(</a>)', '', regex=True)\n",
    "    ReviewText = ReviewText.str.replace('(&amp)', '', regex=True)\n",
    "    ReviewText = ReviewText.str.replace('(&gt)', '', regex=True)\n",
    "    ReviewText = ReviewText.str.replace('(&lt)', '', regex=True)\n",
    "    ReviewText = ReviewText.str.replace('(\\xa0)', ' ', regex=True)  \n",
    "    return ReviewText\n",
    "\n",
    "df['processed_review'] = preprocess(df['review'])\n",
    "df['polarity'] = df['processed_review'].map(lambda text: TextBlob(text).sentiment.polarity)\n",
    "df['review_len'] = df['processed_review'].astype(str).apply(len)\n",
    "df['word_count'] = df['processed_review'].apply(lambda x: len(str(x).split()))\n",
    "\n",
    "df[df['polarity'] == 0].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "183a3257",
   "metadata": {},
   "source": [
    "## Helpful functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3bb7a9a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_by_sentiment(df, sent_slctd):\n",
    "    \"\"\"\n",
    "    Takes in dataFrame and filters it based on polarity.\n",
    "    Positive: sentiment > 0\n",
    "    Neutral: sentiment == 0\n",
    "    Negative: sentiment < 0\n",
    "    \"\"\"\n",
    "    if sent_slctd == 'all':\n",
    "        df = df\n",
    "    elif sent_slctd == 'positive':\n",
    "        df = df[df['polarity'] > 0]\n",
    "    elif sent_slctd == 'neutral':\n",
    "        df = df[df['polarity'] == 0]\n",
    "    elif sent_slctd == 'negative':\n",
    "        df = df[df['polarity'] < 0]\n",
    "    return df\n",
    "\n",
    "    \n",
    "\n",
    "def plotly_wordcloud(data_frame):\n",
    "    \"\"\"A wonderful function that returns figure data for three equally\n",
    "    wonderful plots: wordcloud, frequency histogram and treemap\"\"\"\n",
    "    \n",
    "    reviews_text = list(data_frame[\"review\"].dropna().values)\n",
    "\n",
    "    if len(reviews_text) < 1:\n",
    "        return {}, {}, {}\n",
    "\n",
    "    # join all documents in corpus\n",
    "    text = \" \".join(list(reviews_text))\n",
    "\n",
    "    word_cloud = WordCloud(stopwords=set(STOPWORDS), max_words=100, max_font_size=90)\n",
    "    word_cloud.generate(text)\n",
    "\n",
    "    word_list = []\n",
    "    freq_list = []\n",
    "    fontsize_list = []\n",
    "    position_list = []\n",
    "    orientation_list = []\n",
    "    color_list = []\n",
    "\n",
    "    for (word, freq), fontsize, position, orientation, color in word_cloud.layout_:\n",
    "        word_list.append(word)\n",
    "        freq_list.append(freq)\n",
    "        fontsize_list.append(fontsize)\n",
    "        position_list.append(position)\n",
    "        orientation_list.append(orientation)\n",
    "        color_list.append(color)\n",
    "\n",
    "    # get the positions\n",
    "    x_arr = []\n",
    "    y_arr = []\n",
    "    for i in position_list:\n",
    "        x_arr.append(i[0])\n",
    "        y_arr.append(i[1])\n",
    "\n",
    "    # get the relative occurence frequencies\n",
    "    new_freq_list = []\n",
    "    for i in freq_list:\n",
    "        new_freq_list.append(i * 80)\n",
    "\n",
    "    trace = go.Scatter(\n",
    "        x=x_arr,\n",
    "        y=y_arr,\n",
    "        textfont=dict(size=new_freq_list, color=color_list),\n",
    "        hoverinfo=\"text\",\n",
    "        textposition=\"top center\",\n",
    "        hovertext=[\"{0} - {1}\".format(w, f) for w, f in zip(word_list, freq_list)],\n",
    "        mode=\"text\",\n",
    "        text=word_list,\n",
    "    )\n",
    "\n",
    "    layout = go.Layout(\n",
    "        {\n",
    "            \"xaxis\": {\n",
    "                \"showgrid\": False,\n",
    "                \"showticklabels\": False,\n",
    "                \"zeroline\": False,\n",
    "                \"automargin\": True,\n",
    "                \"range\": [-100, 250],\n",
    "            },\n",
    "            \"yaxis\": {\n",
    "                \"showgrid\": False,\n",
    "                \"showticklabels\": False,\n",
    "                \"zeroline\": False,\n",
    "                \"automargin\": True,\n",
    "                \"range\": [-100, 450],\n",
    "            },\n",
    "            \"margin\": dict(t=20, b=20, l=10, r=10, pad=4),\n",
    "            \"hovermode\": \"closest\",\n",
    "        }\n",
    "    )\n",
    "\n",
    "    wordcloud_figure_data = {\"data\": [trace], \"layout\": layout}\n",
    "    word_list_top = word_list[:25]\n",
    "    word_list_top.reverse()\n",
    "    freq_list_top = freq_list[:25]\n",
    "    freq_list_top.reverse()\n",
    "\n",
    "    frequency_figure_data = {\n",
    "        \"data\": [\n",
    "            {\n",
    "                \"y\": word_list_top,\n",
    "                \"x\": freq_list_top,\n",
    "                \"type\": \"bar\",\n",
    "                \"name\": \"\",\n",
    "                \"orientation\": \"h\",\n",
    "            }\n",
    "        ],\n",
    "        \"layout\": {\"height\": \"550\", \"margin\": dict(t=20, b=20, l=100, r=20, pad=4)},\n",
    "    }\n",
    "    treemap_trace = go.Treemap(\n",
    "        labels=word_list_top, parents=[\"\"] * len(word_list_top), values=freq_list_top\n",
    "    )\n",
    "    treemap_layout = go.Layout({\"margin\": dict(t=10, b=10, l=5, r=5, pad=4)})\n",
    "    treemap_figure = {\"data\": [treemap_trace], \"layout\": treemap_layout}\n",
    "    return wordcloud_figure_data, frequency_figure_data, treemap_figure\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c9b051c",
   "metadata": {},
   "source": [
    "## Page layout and contents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ef434aa9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Picture for the navbar\n",
    "LULU_LOGO = \"https://logos-download.com/wp-content/uploads/2016/08/Lululemon_logo.png\"\n",
    "\n",
    "# Options for the product selection dropdown\n",
    "product_list = [p for p in df['product'].unique()]\n",
    "\n",
    "app = JupyterDash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])\n",
    "\n",
    "NAVBAR = dbc.Navbar(\n",
    "    children=[\n",
    "        html.A(\n",
    "            # Use row and col to control vertical alignment of logo / brand\n",
    "            dbc.Row(\n",
    "                [\n",
    "                    dbc.Col(html.Img(src=LULU_LOGO, height=\"30px\")),\n",
    "                    dbc.Col(dbc.NavbarBrand(\"lululemon Customer Reviews\", className=\"ms-2\")),\n",
    "                ],\n",
    "                align=\"center\",\n",
    "                className='g-0',\n",
    "            ),\n",
    "            href=\"https://shop.lululemon.com/\",\n",
    "            style={\"textDecoration\": \"none\"}\n",
    "        )\n",
    "    ],\n",
    "    color=\"dark\",\n",
    "    dark=True,\n",
    "    sticky=\"top\",\n",
    ")\n",
    "\n",
    "CONTROLS = dbc.Card(\n",
    "    [\n",
    "        html.Div(\n",
    "            [\n",
    "                html.H4(children=\"Data Selection\", className=\"display-5\"),\n",
    "                html.Hr(className=\"my-2\"),\n",
    "                dbc.Label(\"Select product\"),\n",
    "                dcc.Dropdown(\n",
    "                    id=\"prod-select\",\n",
    "                    options=[\n",
    "                        {\"label\": prod, \"value\": prod} for prod in product_list\n",
    "                    ],\n",
    "                    optionHeight=35,\n",
    "                    value=None,\n",
    "                    style={'width':\"100%\"}\n",
    "                ),\n",
    "                dbc.Label(\"Select review types\"),\n",
    "                dcc.RadioItems(\n",
    "                    id=\"review-sent-type\",\n",
    "                    options=[\n",
    "                        {'label': 'All', 'value': 'all'},\n",
    "                        {'label': 'Positive', 'value': 'positive'},\n",
    "                        {'label': 'Neutral', 'value': 'neutral'},\n",
    "                        {'label': 'Negative', 'value': 'negative'}\n",
    "                    ],\n",
    "                    value='all',\n",
    "                    inputStyle={'margin-right': '20px'},\n",
    "                    labelStyle={'display': 'block'}\n",
    "                )\n",
    "            ]\n",
    "        )\n",
    "    ],\n",
    "    body=True\n",
    ")\n",
    "\n",
    "WORDCLOUD_PLOTS = [\n",
    "    dbc.CardHeader(html.H5(\"Most frequently used words in reviews\")),\n",
    "    dbc.Alert(\n",
    "        \"Not enough data to render these plots, please adjust the filters\",\n",
    "        id=\"no-data-alert\",\n",
    "        color=\"warning\",\n",
    "        style={\"display\": \"none\"},\n",
    "    ),\n",
    "    dbc.CardBody(\n",
    "        [\n",
    "            dbc.Row(\n",
    "                [\n",
    "                    dbc.Col(\n",
    "                        dcc.Loading(\n",
    "                            id=\"loading-frequencies\",\n",
    "                            children=[dcc.Graph(id=\"frequency_figure\")],\n",
    "                            type=\"default\",\n",
    "                        )\n",
    "                    ),\n",
    "                    dbc.Col(\n",
    "                        [\n",
    "                            dcc.Tabs(\n",
    "                                id=\"tabs\",\n",
    "                                children=[\n",
    "                                    dcc.Tab(\n",
    "                                        label=\"Treemap\",\n",
    "                                        children=[\n",
    "                                            dcc.Loading(\n",
    "                                                id=\"loading-treemap\",\n",
    "                                                children=[dcc.Graph(id=\"product-treemap\")],\n",
    "                                                type=\"default\",\n",
    "                                            )\n",
    "                                        ],\n",
    "                                    ),\n",
    "                                    dcc.Tab(\n",
    "                                        label=\"Wordcloud\",\n",
    "                                        children=[\n",
    "                                            dcc.Loading(\n",
    "                                                id=\"loading-wordcloud\",\n",
    "                                                children=[\n",
    "                                                    dcc.Graph(id=\"product-wordcloud\")\n",
    "                                                ],\n",
    "                                                type=\"default\",\n",
    "                                            )\n",
    "                                        ],\n",
    "                                    ),\n",
    "                                ],\n",
    "                            )\n",
    "                        ],\n",
    "                        md=8,\n",
    "                    ),\n",
    "                ]\n",
    "            )\n",
    "        ]\n",
    "    ),\n",
    "]\n",
    "\n",
    "\n",
    "app.layout = dbc.Container(\n",
    "    [\n",
    "        NAVBAR,\n",
    "        html.Hr(),\n",
    "        dbc.Row(\n",
    "            [\n",
    "                dbc.Col(CONTROLS, md=4),\n",
    "                dbc.Col(dcc.Graph(id=\"rating-dist\"), md=8)\n",
    "            ],\n",
    "            align=\"center\"\n",
    "        ),\n",
    "        dbc.Card(WORDCLOUD_PLOTS)\n",
    "    ],\n",
    "    fluid=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb71aeb4",
   "metadata": {},
   "source": [
    "## Callbacks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b9fdb886",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dash app running on http://127.0.0.1:8050/\n",
      "None\n",
      "all\n",
      "redrawing bank-wordcloud...done\n"
     ]
    }
   ],
   "source": [
    "@app.callback(\n",
    "    Output(\"rating-dist\", \"figure\"),\n",
    "    [\n",
    "        Input(\"prod-select\", \"value\"),\n",
    "        Input(\"review-sent-type\", \"value\"),\n",
    "    ],\n",
    ")\n",
    "def update_graph(prod_slctd, sent_slctd):\n",
    "    print(prod_slctd)\n",
    "    print(sent_slctd)\n",
    "    \n",
    "    dff = df.copy()\n",
    "    dff = dff[dff[\"product\"] == prod_slctd]\n",
    "    dff = filter_by_sentiment(dff, sent_slctd)\n",
    "    \n",
    "    # Distribution of review ratings\n",
    "    fig = px.histogram(\n",
    "        data_frame = dff,\n",
    "        x='rating',\n",
    "        template='plotly_white',\n",
    "        title='Review Rating Distribution'\n",
    "    )\n",
    "    fig.update_xaxes(title='Rating').update_yaxes(title='Number of Reviews')\n",
    "    \n",
    "    return fig\n",
    "\n",
    "# WordCloud Plots\n",
    "@app.callback(\n",
    "    [\n",
    "        Output(\"product-wordcloud\", \"figure\"),\n",
    "        Output(\"frequency_figure\", \"figure\"),\n",
    "        Output(\"product-treemap\", \"figure\"),\n",
    "        Output(\"no-data-alert\", \"style\"),\n",
    "    ],\n",
    "    [\n",
    "        Input(\"prod-select\", \"value\"),\n",
    "        Input(\"review-sent-type\", \"value\"),\n",
    "    ],\n",
    ")\n",
    "def update_wordcloud_plot(prod_slctd, sent_slctd):\n",
    "    \"\"\" Callback to rerender wordcloud plot \"\"\"\n",
    "    dff = df.copy()\n",
    "    dff = dff[dff[\"product\"] == prod_slctd]\n",
    "    dff = filter_by_sentiment(dff, sent_slctd)\n",
    "    \n",
    "    wordcloud, frequency_figure, treemap = plotly_wordcloud(dff)\n",
    "    alert_style = {\"display\": \"none\"}\n",
    "    \n",
    "    if (wordcloud == {}) or (frequency_figure == {}) or (treemap == {}):\n",
    "        alert_style = {\"display\": \"block\"}\n",
    "    print(\"redrawing bank-wordcloud...done\")\n",
    "    \n",
    "    return (wordcloud, frequency_figure, treemap, alert_style)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run_server(debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db72b3c5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
